// In the top down approach, 
// we just start solving the problem naturally, 
// so we will just start checking if 
// the there is already a solution stored in the array or not.

#include <iostream>
#define MAX 100
using namespace std;

int memorizedCutRod_Aux (int p[], int n, int r[])
{
    if (r[n] >= 0){
        return r[n];
    }

    int q; // q is here maximum revenue
    if (n == 0){
        q = 0;
    }

    else{
        q = -1;

        for (int i = 1; i <= n; i++){
            q = max(q, p[i] + memorizedCutRod_Aux(p, n-i, r));
        }
        //p[i] + r(n-i) means,
        //p[i] + maximum revenue that can be generated by rod of length n-i
    }

    r[n] = q;

    return r[n];
}

int memorizedCutRod (int p[], int n)
{
    int r[n];

    for (int i = 0; i <= n; i++){
        r[i] = -1;
    }

    return memorizedCutRod_Aux(p, n, r);
}

int main ()
{
    freopen ("rodCut.txt", "r", stdin);
    
    int n, num;
    cout << "Enter the total length of the Rod : ";
    cin >> n;

    cout << "Enter the given number of cutting lengths : ";
    cin >> num;

    int l[MAX], p[MAX];

    cout << "Enter the cutting lengths : " << endl;
    for (int i = 1; i <= num; i++){
        cin >> l[i];
    }

    cout << "Enter the cutting lengths profits sequencially : " << endl;
    for (int i = 1; i <= num; i++){
        cin >> p[i];
    }

    cout << "Maximum profit : " << memorizedCutRod(p, n);

    return 0;
}